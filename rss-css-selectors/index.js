(()=>{"use strict";var e={801:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(537),l=t.n(a),o=t(645),r=t.n(o)()(l());r.push([e.id,".level-viewer {\n  padding: 10px 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: start;\n  width: 15%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 85%;\n  background: rgb(26, 25, 25);\n}\n\n.level-viewer__title {\n  color: aqua;\n}","",{version:3,sources:["webpack://./src/components/levelViewer/level-viewer.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,kBAAkB;EAClB,UAAU;EACV,YAAY;EACZ,eAAe;EACf,MAAM;EACN,SAAS;EACT,2BAA2B;AAC7B;;AAEA;EACE,WAAW;AACb",sourcesContent:[".level-viewer {\n  padding: 10px 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: start;\n  width: 15%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 85%;\n  background: rgb(26, 25, 25);\n}\n\n.level-viewer__title {\n  color: aqua;\n}"],sourceRoot:""}]);const s=r},655:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(537),l=t.n(a),o=t(645),r=t.n(o)()(l());r.push([e.id,".table {  \n  width: min-content;\n  position: relative;\n  padding: 1vw 2vw;\n  margin: 4vw 0 5vw 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgb(184, 114, 9);\n  gap: 3vw;\n  transform: perspective(350px) rotateX(15deg);\n  border-radius: 0.3vw;\n  box-shadow: 0px calc(20px + 0.8vw) calc(5px + 0.8vw) rgba(5, 5, 5, 0.6);\n}\n\n.table::after {\n  content: '';  \n  width: calc(100% - 20px + 0.1vw);\n  border-top: calc(2px + 0.5vw) solid rgb(124, 76, 4);\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  position: absolute;\n  top: calc(100% - 0.2vw);\n  left: 0;\n}\n\nbento {\n  display: flex;\n  position: relative;\n  z-index: -1;\n  justify-content: center;\n  align-items: center;\n  width: 9vw;\n  height: 5vw;\n  background-color: rgb(123, 12, 12);\n  border-top: double 2vw rgb(65, 9, 9);\n  border-bottom: double 2vw rgb(65, 9, 9);\n  transition: all ease-in-out .5s;\n}\n\npickle {\n  display: block;\n  position: relative;\n  width: 15%;\n  height: 30%;\n  border-radius: 40px;\n  background: green;\n  border: solid 2px rgb(4, 95, 4);\n  border-bottom: solid 8px rgb(4, 95, 4);\n}\n\napple {\n  display: block;\n  position: relative;\n  width: 2vw;\n  height: 2vw;\n  border-radius: 40px;\n  background: red;\n  border: solid 2px rgb(165, 4, 4);\n  border-width: 1px 3px 6px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  box-shadow: 0px calc(2px + 0.2vw) 5px rgba(0,0,0,.5);\n  transition: all .5s ease-out; \n}\n\napple::after,\npickle::after {\n content: \"\";\n width: 25%;\n height: 25%;\n border-radius: 50%;\n position: absolute;\n top: 10%;\n left: 50%;\n background: rgba(255, 255, 255, 0.496);\n transition: all .5s ease-out; \n}\n\n\nplate {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  z-index: -10;\n  width: 7vw;\n  height: 7vw;\n  border-radius: 50%;\n  background: white;\n  border: solid calc(1px + 0.1vw) rgb(209, 209, 209);\n  border-bottom: solid calc(4px + 0.1vw) rgb(209, 209, 209);\n  box-shadow: 0px calc(5px + 0.2vw) 5px rgba(0,0,0,.2);\n  transition: all .2s ease-out; \n}","",{version:3,sources:["webpack://./src/components/table/table.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,4BAA4B;EAC5B,QAAQ;EACR,4CAA4C;EAC5C,oBAAoB;EACpB,uEAAuE;AACzE;;AAEA;EACE,WAAW;EACX,gCAAgC;EAChC,mDAAmD;EACnD,mCAAmC;EACnC,oCAAoC;EACpC,kBAAkB;EAClB,uBAAuB;EACvB,OAAO;AACT;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,UAAU;EACV,WAAW;EACX,kCAAkC;EAClC,oCAAoC;EACpC,uCAAuC;EACvC,+BAA+B;AACjC;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,mBAAmB;EACnB,iBAAiB;EACjB,+BAA+B;EAC/B,sCAAsC;AACxC;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,mBAAmB;EACnB,eAAe;EACf,gCAAgC;EAChC,yBAAyB;EACzB,sBAAsB;EACtB,4BAA4B;EAC5B,oDAAoD;EACpD,4BAA4B;AAC9B;;AAEA;;CAEC,WAAW;CACX,UAAU;CACV,WAAW;CACX,kBAAkB;CAClB,kBAAkB;CAClB,QAAQ;CACR,SAAS;CACT,sCAAsC;CACtC,4BAA4B;AAC7B;;;AAGA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,UAAU;EACV,WAAW;EACX,kBAAkB;EAClB,iBAAiB;EACjB,kDAAkD;EAClD,yDAAyD;EACzD,oDAAoD;EACpD,4BAA4B;AAC9B",sourcesContent:[".table {  \n  width: min-content;\n  position: relative;\n  padding: 1vw 2vw;\n  margin: 4vw 0 5vw 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgb(184, 114, 9);\n  gap: 3vw;\n  transform: perspective(350px) rotateX(15deg);\n  border-radius: 0.3vw;\n  box-shadow: 0px calc(20px + 0.8vw) calc(5px + 0.8vw) rgba(5, 5, 5, 0.6);\n}\n\n.table::after {\n  content: '';  \n  width: calc(100% - 20px + 0.1vw);\n  border-top: calc(2px + 0.5vw) solid rgb(124, 76, 4);\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  position: absolute;\n  top: calc(100% - 0.2vw);\n  left: 0;\n}\n\nbento {\n  display: flex;\n  position: relative;\n  z-index: -1;\n  justify-content: center;\n  align-items: center;\n  width: 9vw;\n  height: 5vw;\n  background-color: rgb(123, 12, 12);\n  border-top: double 2vw rgb(65, 9, 9);\n  border-bottom: double 2vw rgb(65, 9, 9);\n  transition: all ease-in-out .5s;\n}\n\npickle {\n  display: block;\n  position: relative;\n  width: 15%;\n  height: 30%;\n  border-radius: 40px;\n  background: green;\n  border: solid 2px rgb(4, 95, 4);\n  border-bottom: solid 8px rgb(4, 95, 4);\n}\n\napple {\n  display: block;\n  position: relative;\n  width: 2vw;\n  height: 2vw;\n  border-radius: 40px;\n  background: red;\n  border: solid 2px rgb(165, 4, 4);\n  border-width: 1px 3px 6px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  box-shadow: 0px calc(2px + 0.2vw) 5px rgba(0,0,0,.5);\n  transition: all .5s ease-out; \n}\n\napple::after,\npickle::after {\n content: \"\";\n width: 25%;\n height: 25%;\n border-radius: 50%;\n position: absolute;\n top: 10%;\n left: 50%;\n background: rgba(255, 255, 255, 0.496);\n transition: all .5s ease-out; \n}\n\n\nplate {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  z-index: -10;\n  width: 7vw;\n  height: 7vw;\n  border-radius: 50%;\n  background: white;\n  border: solid calc(1px + 0.1vw) rgb(209, 209, 209);\n  border-bottom: solid calc(4px + 0.1vw) rgb(209, 209, 209);\n  box-shadow: 0px calc(5px + 0.2vw) 5px rgba(0,0,0,.2);\n  transition: all .2s ease-out; \n}"],sourceRoot:""}]);const s=r},767:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(537),l=t.n(a),o=t(645),r=t.n(o)()(l());r.push([e.id,"body {\n  background: rgb(42, 34, 28);\n  font-family: Arial, Helvetica, sans-serif;\n  color: #a2a2a2;\n}\n\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 85%;\n  min-height: 100%;\n} \n","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,yCAAyC;EACzC,cAAc;AAChB;;;AAGA;EACE,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,mBAAmB;EACnB,UAAU;EACV,gBAAgB;AAClB",sourcesContent:["body {\n  background: rgb(42, 34, 28);\n  font-family: Arial, Helvetica, sans-serif;\n  color: #a2a2a2;\n}\n\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 85%;\n  min-height: 100%;\n} \n"],sourceRoot:""}]);const s=r},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,l,o){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var s=0;s<this.length;s++){var p=this[s][0];null!=p&&(r[p]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);a&&r[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),l&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=l):c[4]="".concat(l)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(l," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},593:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var a=t(379),l=t.n(a),o=t(795),r=t.n(o),s=t(569),p=t.n(s),i=t(565),c=t.n(i),d=t(216),A=t.n(d),b=t(589),u=t.n(b),f=t(801),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=p().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=A(),l()(f.Z,m);const h=f.Z&&f.Z.locals?f.Z.locals:void 0},955:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var a=t(379),l=t.n(a),o=t(795),r=t.n(o),s=t(569),p=t.n(s),i=t(565),c=t.n(i),d=t(216),A=t.n(d),b=t(589),u=t.n(b),f=t(655),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=p().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=A(),l()(f.Z,m);const h=f.Z&&f.Z.locals?f.Z.locals:void 0},427:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var a=t(379),l=t.n(a),o=t(795),r=t.n(o),s=t(569),p=t.n(s),i=t(565),c=t.n(i),d=t(216),A=t.n(d),b=t(589),u=t.n(b),f=t(767),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=p().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=A(),l()(f.Z,m);const h=f.Z&&f.Z.locals?f.Z.locals:void 0},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var o={},r=[],s=0;s<e.length;s++){var p=e[s],i=a.base?p[0]+a.base:p[0],c=o[i]||0,d="".concat(i," ").concat(c);o[i]=c+1;var A=t(d),b={css:p[1],media:p[2],sourceMap:p[3],supports:p[4],layer:p[5]};if(-1!==A)n[A].references++,n[A].updater(b);else{var u=l(b,a);a.byIndex=s,n.splice(s,0,{identifier:d,updater:u,references:1})}r.push(d)}return r}function l(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,l){var o=a(e=e||[],l=l||{});return function(e){e=e||[];for(var r=0;r<o.length;r++){var s=t(o[r]);n[s].references--}for(var p=a(e,l),i=0;i<o.length;i++){var c=t(o[i]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=p}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var l=void 0!==t.layer;l&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,l&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},717:function(e,n,t){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),t(427);const l=a(t(139)),o=a(t(108)),r=a(t(214));n.default=class{constructor(){this.createView()}createView(){const e=(0,r.default)({tagName:"div",classNames:["main-container"],parentNode:document.body}),n=l.default,t=o.default;e.append(n),document.body.append(t)}}},108:function(e,n,t){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),t(593);const l=a(t(214)),o=(0,l.default)({tagName:"aside",classNames:["level-viewer"],parentNode:document.body});(0,l.default)({tagName:"h2",classNames:["aside"],parentNode:o,textContent:"Level"}),n.default=o},139:function(e,n,t){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),t(955);const l=a(t(214)),o=a(t(262)),r=(0,l.default)({tagName:"div",classNames:["table"]});!function(){const e=o.default[2].boardMarkup;r.insertAdjacentHTML("afterbegin",e)}(),n.default=r},214:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){const n=document.createElement(e.tagName);return n.classList.add(...e.classNames),e.textContent&&(n.textContent=e.textContent),e.parentNode&&e.parentNode.append(n),e.eventHandler&&e.eventType&&n.addEventListener(e.eventType,e.eventHandler),n}},262:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=[{doThis:"Select the plates",selector:"plate",boardMarkup:"\n    <plate/>\n    <plate/>\n    "},{doThis:"Select the bento boxes",selector:"bento",boardMarkup:"\n    <bento/>\n    <plate/>\n    <bento/>\n    "},{doThis:"Select the fancy plate",selector:"#fancy",boardMarkup:'<bento class="some-class"></bento>\n<plate>\n  <apple class="casual"></apple>\n</plate>\n<apple></apple>'},{doThis:"Select the apple on the plate",selector:"plate apple",boardMarkup:"\n    <bento/>\n    <plate>\n      <apple/>\n    </plate>\n    <apple/>\n    "},{doThis:"Select the pickle on the fancy plate",selector:"#fancy pickle",boardMarkup:'\n    <bento>\n    <orange/>\n    </bento>\n    <plate id="fancy">\n      <pickle/>\n    </plate>\n    <plate>\n      <pickle/>\n    </plate>\n    '},{doThis:"Select the small apples",selector:".small",boardMarkup:'\n    <apple/>\n    <apple class="small"/>\n    <plate>\n      <apple class="small"/>\n    </plate>\n    <plate/>\n    '},{doThis:"Select the small oranges",selector:"orange.small",boardMarkup:'\n    <apple/>\n    <apple class="small"/>\n    <bento>\n      <orange class="small"/>\n    </bento>\n    <plate>\n      <orange/>\n    </plate>\n    <plate>\n      <orange class="small"/>\n    </plate>'},{doThis:"Select the small oranges in the bentos",selector:"bento orange.small",boardMarkup:'\n    <bento>\n      <orange/>\n    </bento>\n    <orange class="small"/>\n    <bento>\n      <orange class="small"/>\n    </bento>\n    <bento>\n      <apple class="small"/>\n    </bento>\n    <bento>\n      <orange class="small"/>\n    </bento>\n    '},{doThis:"Select all the plates and bentos",selector:"plate,bento",boardMarkup:'\n    <pickle class="small"/>\n    <pickle/>\n    <plate>\n      <pickle/>\n    </plate>\n    <bento>\n      <pickle/>\n    </bento>\n    <plate>\n      <pickle/>\n    </plate>\n    <pickle/>\n    <pickle class="small"/>\n    '},{doThis:"Select all the things!",selector:"*",boardMarkup:'\n    <apple/>\n    <plate>\n      <orange class="small" />\n    </plate>\n    <bento/>\n    <bento>\n      <orange/>\n    </bento>\n    <plate id="fancy"/>\n    '},{doThis:"Select everything on a plate",selector:"plate *",boardMarkup:'\n    <plate id="fancy">\n      <orange class="small"/>\n    </plate>\n    <plate>\n      <pickle/>\n    </plate>\n    <apple class="small"/>\n    <plate>\n      <apple/>\n    </plate>'},{doThis:"Select every apple that's next to a plate",selector:"plate + apple",boardMarkup:'\n    <bento>\n      <apple class="small"/>\n    </bento>\n    <plate />\n    <apple class="small"/>\n    <plate />\n    <apple/>\n    <apple class="small"/>\n    <apple class="small"/>\n    '},{doThis:"Select the pickles beside the bento",selector:"bento ~ pickle",boardMarkup:'\n    <pickle/>\n    <bento>\n      <orange class="small"/>\n    </bento>\n    <pickle class="small"/>\n    <pickle/>\n    <plate>\n      <pickle/>\n    </plate>\n    <plate>\n      <pickle class="small"/>\n    </plate>\n    '},{doThis:"Select the apple directly on a plate",selector:"plate > apple",boardMarkup:'\n    <plate>\n      <bento>\n        <apple/>\n      </bento>\n    </plate>\n    <plate>\n      <apple/>\n    </plate>\n    <plate/>\n    <apple/>\n    <apple class="small"/>\n    '},{doThis:"Select the top orange",selector:"plate :first-child",boardMarkup:'\n    <bento/>\n    <plate />\n    <plate>\n      <orange />\n      <orange />\n      <orange />\n    </plate>\n    <pickle class="small" />\n    '},{doThis:"Select the apple and the pickle on the plates",selector:"plate :only-child",boardMarkup:'\n    <plate>\n      <apple/>\n    </plate>\n    <plate>\n      <pickle />\n    </plate>\n    <bento>\n      <pickle />\n    </bento>\n    <plate>\n      <orange class="small"/>\n      <orange/>\n    </plate>\n    <pickle class="small"/>\n    '},{doThis:"Select the small apple and the pickle",selector:".small:last-child",boardMarkup:'\n    <plate id="fancy">\n      <apple class="small"/>\n    </plate>\n    <plate/>\n    <plate>\n      <orange class="small"/>\n      <orange>\n    </plate>\n    <pickle class="small"/>'},{doThis:"Select the 3rd plate",selector:":nth-child(3)",boardMarkup:'\n    <plate/>\n    <plate/>\n    <plate/>\n    <plate id="fancy"/>\n    '},{doThis:"Select the 1st bento",selector:"bento:nth-last-child(3)",boardMarkup:"\n    <plate/>\n    <bento/>\n    <plate>\n      <orange/>\n      <orange/>\n      <orange/>\n    </plate>\n    <bento/>\n    "},{doThis:"Select first apple",selector:"apple:first-of-type",boardMarkup:'\n    <orange class="small"/>\n    <apple/>\n    <apple class="small"/>\n    <apple/>\n    <apple class="small"/>\n    <plate>\n      <orange class="small"/>\n      <orange/>\n    </plate>\n    '},{doThis:"Select all even plates",selector:"plate:nth-of-type(even)",boardMarkup:'\n    <plate/>\n    <plate/>\n    <plate/>\n    <plate/>\n    <plate id="fancy"/>\n    <plate/>\n    '},{doThis:"Select every 2nd plate, starting from the 3rd",selector:"plate:nth-of-type(2n+3)",boardMarkup:'\n    <plate/>\n    <plate>\n      <pickle class="small" />\n    </plate>\n    <plate>\n      <apple class="small" />\n    </plate>\n    <plate/>\n    <plate>\n      <apple />\n    </plate>\n    <plate/>\n    '},{selector:"apple:only-of-type",doThis:"Select the apple on the middle plate",boardMarkup:'\n    <plate id="fancy">\n      <apple class="small" />\n      <apple />\n    </plate>\n    <plate>\n      <apple class="small" />\n    </plate>\n    <plate>\n      <pickle />\n    </plate>\n    '},{doThis:"Select the last apple and orange",selector:".small:last-of-type",boardMarkup:'\n    <orange class="small"/>\n    <orange class="small" />\n    <pickle />\n    <pickle />\n    <apple class="small" />\n    <apple class="small" />\n    '},{doThis:"Select the empty bentos",selector:"bento:empty",boardMarkup:'\n    <bento/>\n    <bento>\n      <pickle class="small"/>\n    </bento>\n    <plate/>\n    <bento/>'},{doThis:"Select the big apples",selector:"apple:not(.small)",boardMarkup:'\n    <plate id="fancy">\n      <apple class="small" />\n    </plate>\n    <plate>\n      <apple />\n    </plate>\n    <apple />\n    <plate>\n      <orange class="small" />\n    </plate>\n    <pickle class="small" />\n    '},{doThis:"Select the items for someone",selector:"[for]",boardMarkup:'\n    <bento><apple class="small"/></bento>\n    <apple for="Ethan"/>\n    <plate for="Alice"><pickle/></plate>\n    <bento for="Clara"><orange/></bento>\n    <pickle/>'},{doThis:"Select the plates for someone",selector:"plate[for]",boardMarkup:'\n    <plate for="Sarah"><pickle/></plate>\n    <plate for="Luke"><apple/></plate>\n    <plate/>\n    <bento for="Steve"><orange/></bento>\n    '},{doThis:"Select Vitaly's meal",selector:"[for=Vitaly]",boardMarkup:'\n    <apple for="Alexei" />\n    <bento for="Albina"><apple /></bento>\n    <bento for="Vitaly"><orange/></bento>\n    <pickle/>\n    '},{doThis:"Select the items for names that start with 'Sa'",selector:'[for^="Sa"]',boardMarkup:'\n    <plate for="Sam"><pickle/></plate>\n    <bento for="Sarah"><apple class="small"/></bento>\n    <bento for="Mary"><orange/></bento>\n    '},{doThis:"Select the items for names that end with 'ato'",selector:'[for$="ato"]',boardMarkup:'\n    <apple class="small"/>\n    <bento for="Hayato"><pickle/></bento>\n    <apple for="Ryota"></apple>\n    <plate for="Minato"><orange/></plate>\n    <pickle class="small"/>\n    '},{doThis:"Select the meals for names that contain 'obb'",selector:'[for*="obb"]',boardMarkup:'\n    <bento for="Robbie"><apple /></bento>\n    <bento for="Timmy"><pickle /></bento>\n    <bento for="Bobby"><orange /></bento>\n    '}]},607:function(e,n,t){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),(new(a(t(717)).default)).createView(),alert("Дорогой Reviwer! Eсли у тебя есть такая возможность, пожалуйста отложи свою проверку до вечера 6.03. Буду безмерно благодарен)) Мой discord: @SadJoeBright#6933; telegram: @sadjoebright")}},n={};function t(a){var l=n[a];if(void 0!==l)return l.exports;var o=n[a]={id:a,exports:{}};return e[a].call(o.exports,o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0,t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,